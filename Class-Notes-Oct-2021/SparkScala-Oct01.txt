
  Agenda - Spark with Scala
  -------------------------

   -> Scala Programming Language
	-> Scala Basics
	-> Scala Functional Programming
	-> Scala Object Oriented Programming 

   -> Spark basics - Building Blocks & Architecture

   -> Spark Core API
	 -> RDD Transformations & Actions
	 -> Shared Variables

   -> Spark SQL
	-> DataFrames APi & Datasets
	
    -> Basic of Machine Learning & Spark MLlib

    -> Introduction to Spark Streaming

 ============================================================

   Materials
  
     	-> Daily class notes
	-> PDF versions of the presentations
	-> Code examples.
	-> githib: https://github.com/ykanakaraju/sparkscala
    
 ===========================================================   

  Scala Programming Language
  --------------------------
	
    -> SCAable LAnguage -> SCALA
    -> Scala is a JVM based Language
	
    -> Scala is multi-paradigm programming language.
	
	-> Objected Oriented Programming
	-> Functional Programming

	-> Scala is BOTH object-oriented & functional programming.

   -> Scala is a statically (strongly) typed language
        -> The data type of every variable is fixed and known at compile time


   Getting Started with Scala
   --------------------------
		
	-> Installing Scala on your personal machine.   (not recommended)
		-> Make sure you have Java 8
		-> Download Scala binaries from https://www.scala-lang.org/download/
		-> Navigate to <scala installation>\bin --> launch scala shell.

	-> Install an IDE		
		1. Scala IDE (Scala IDE for Eclipse)
		
		   -> Make sure you have Java 8 installed.
		   -> Download Scala IDE from http://scala-ide.org/download/sdk.html		

		2. IntelliJ 

		    https://docs.scala-lang.org/scala3/getting-started.html?_ga=2.106040707.1825204740.1633064846-392345925.1620102882

	-> Using Online Compilers		
		1. scastie  ->  https://scastie.scala-lang.org/?target=dotty	


   Type Declaration:   
	-> val i : Int = 10


   Scala Type Inference
         -> Scala can implicitly infer the types based on the assigned value.
	 -> We do not have to explicitly declare data types.


   Scala Variables and Values
   --------------------------
	
	val -> immutable values
	       once a value is assigned, you can not change it.

	var -> mutable variable
	       the value can be changed after assignment


  Scala is PURE object oriented language
  --------------------------------------
	
     -> Scala does not have primitives or operators.	
     -> In scala, all data is objects and operations are method invocations.

	  val i = 10.*(40)  
   
             -> 10 is an Int object
	     -> * is a method invoked on 10 (Int object)
	     -> 40 is an Int object passed as a parameter
	     -> i is an Int object returned by the * method.
		
      -> <obj>.method<param1> => <obj> method<param1> => <obj> method param1

	      
   Scala Expressions => Any computable statement

	10,  10 + 20, "Hello", 10 > 20,  


   Scala Blocks => Any code module enclosed in { .. } is called a block 
		-> A block returns a value. (that value could be a Unit also)
		-> The value returned by a blocks is the value of the last statement
		   that is execucuted in the block.

	val x = { 
      		val i = 20
      		var output = true;
      		if ( i >= 20 ) output = i > 20
      		else output = i <= 20	

		output      
  	}
  
  	println(x)   // true
   

	
   Scala Unit  => In scala, A Unit is an object that represents "no value"
		  A unit is printed as "()"


    Input -> Reading user input from Standard Input device (keyboard)

	import scala.io.StdIn

	val name = StdIn.readLine("Your Name : ")   
    	println("Name: " + name.toUpperCase )
    
    	println("Your Age:")     
   	val age = StdIn.readInt()   
    	println("Age: " + age )
    
    	println("Your Height:")     
   	val height = StdIn.readDouble()   
    	println("Height: " + height )


    Output:
	print
	println
	printf => printf("Name: %s, Age: %d, Height: %.3f", name, age, height)


   String interpolation
   --------------------

	"s" intepolator
		val str = s"Name: $name, Age: ${age + 10}, Height: $height"

	"f" interpolator => s interpolator + formatting chars
		val str = f"Name: $name, Age: ${age + 10}, Height: $height%.2f"
    
	"raw" interpolator => s interpolator + escapes the escape chars
		val str = raw"Name: $name\tAge: ${age + 10}\tHeight: $height"

    Lazy Values
    ------------
	-> The execution of the lazy values is differed until they are referenced inside 
	   the code for some computation. 	
	
	 lazy val i = {
      		println("-------------- i ------------")      // Line 1
      		100
    	 }
    
    	lazy val j = {
      		println("-------------- j ------------")      // Line 2
      		200
    	}
    
    	println(i)                                      // Line 3
    	println(j)  	


    Control Structures
    ------------------
		
	1. if..elseif..else

		if (<boolean>) {
		   ....
		}
		else if (<boolean>) {
		    ....	
		}
		else {
	           ....
		}

		=> if statement can return a value.

		   i = 65
		   val x = if (i > 100) i - 100 else if (i < 100) 100 - i else 100 
		   // x = 35 

		=> The implicitly inferred data type of return value of if statement
		   will be based on the common-denominator of the datatypes of different
		   branches of if statement.

		val x = if (i > 100) i - 100 else if (i < 100) 100l - i else "Hello"
		// Her x is object of 'Any' class (which is the super type)


	2. match..case

		val i = 150
     		var out = 0
     
     		i match {
       			case 10 => { out = 100 - 10 }
       			case 20 => { out = 100 - 20 }
       			case 30 => { out = 100 - 30 }
       			case 40 => { out = 100 - 40 }
       			case 50 => { out = 100 - 50 }  
       			case _  => { out = 100 }
     		}
     
     		println(out)   // 100, matched by case _


		Example 2

		val x = i match {
       			case 10 => { 100 - 10 }
       			case 20 => { 100 - 20 }
       			case 30 => { 100 - 30 }
       			case 40 => { 100 - 40 }
       			case 50 => { 100 - 50 } 
       			case x if (i % 10 == 0) => { s"divisible by 10 ($x)" }
       			case x if (i % 5 == 0) => { s"divisible by 5 ($x)" }
       			case _  => { 100 }
     		}


   Scala Class Heirarchy
   ----------------------
       Any   	=>  AnyVal	=> Int, Long, Double, Boolean, Unit, Byte, Char, ..
	 	=>  AnyRef	=> String, Map, List, .. all other classes


   Range Object
   -------------
	=> exclusive range (the final value is excluded)

	Range(1, 10)     => 1,2,3,4,5,6,7,8,9
	Range(1, 10, 2)  => 1,3,5,7,9
	Range(100, 0, -20)  => 100, 80, 60, 40, 20
	









